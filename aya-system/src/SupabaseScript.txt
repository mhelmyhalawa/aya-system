-- جدول المستخدمين (يرتبط مع Supabase Auth)
create table profiles (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  full_name text,
  role text check (role in ('admin', 'teacher')),
  username text unique not null,
  password_hash text not null,
  login_attempts int default 0,
  last_login_at timestamp with time zone,
  created_at timestamp with time zone default now(),
  deleted_at timestamp
);

ALTER TABLE profiles DROP CONSTRAINT profiles_id_fkey;

alter table profiles enable row level security;

create policy "Allow read for all" on profiles
  for select
  using (true);
  
create policy "Allow insert for superadmin" on profiles
  for insert
  with check (auth.role() = 'superadmin');
  
  
  SELECT conname
FROM pg_constraint
WHERE conrelid = 'profiles'::regclass AND contype = 'c';



ALTER TABLE profiles DROP CONSTRAINT profiles_role_check;

ALTER TABLE profiles
ADD CONSTRAINT profiles_role_check CHECK (role IN ('superadmin', 'admin', 'teacher'));

ALTER TABLE profiles
ALTER COLUMN role SET DEFAULT 'teacher';
  
/*
 * create-superadmin.sql
 * ملف SQL لإنشاء المستخدم المسؤول الرئيسي مباشرة في قاعدة البيانات
 * لحل مشكلة: ERROR: 23503: insert or update on table "profiles" violates foreign key constraint "profiles_id_fkey"
 */

-- 2. بعد ذلك، ننشئ الملف الشخصي في جدول profiles
INSERT INTO profiles (
  id,
  full_name,
  role,
  username,
  password_hash,
  login_attempts,
  created_at
) VALUES (
  '550e8400-e29b-41d4-a716-446655440000',  -- نفس المعرف من الخطوة السابقة
  'المسؤول الرئيسي',
  'superadmin',
  'superadmin',
  '$2a$10$p.6NsD8jR.kWe2ghKKwhue2iSNs0tDRWGhEcYjYppehre7q9z81ga',  -- نفس كلمة المرور المشفرة
  0,  -- عدد محاولات تسجيل الدخول
  CURRENT_TIMESTAMP  -- تاريخ الإنشاء
)
ON CONFLICT (id) DO UPDATE SET
  password_hash = '$2a$10$p.6NsD8jR.kWe2ghKKwhue2iSNs0tDRWGhEcYjYppehre7q9z81ga',
  login_attempts = 0;

-- ملاحظة: قد تحتاج إلى صلاحيات مشرف قاعدة البيانات لتنفيذ هذا النص البرمجي
-- إذا كان لديك خطأ في الصلاحيات، استخدم مفتاح Service Role API Key من Supabase


CREATE POLICY "Allow insert for superadmin only"
  ON profiles
  FOR INSERT
  WITH CHECK (auth.uid() = '550e8400-e29b-41d4-a716-446655440000');


create table study_circles (
  id uuid primary key default gen_random_uuid(),
  name text not null, -- اسم الحلقة
  teacher_id uuid not null references profiles(id), -- المعلم المسؤول
  location text, -- المكان
  schedule text, -- التوقيت
  max_students int check (max_students > 0), -- الحد الأقصى للطلاب
  created_at timestamptz default now(),
  deleted_at timestamptz
);
create policy "Allow read for everyone"
on study_circles
for select
using (true);

CREATE TABLE IF NOT EXISTS study_circle_schedules (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  study_circle_id uuid NOT NULL REFERENCES study_circles(id) ON DELETE CASCADE,
  weekday smallint NOT NULL CHECK (weekday BETWEEN 0 AND 6), -- 0=Sunday
  start_time time NOT NULL,
  end_time time NOT NULL,
  location text, -- optional override per slot
  created_at timestamptz DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_circle_day_start
  ON study_circle_schedules(study_circle_id, weekday, start_time);

-- C) Circle sessions (actual occurrence). A row per day/session.
CREATE TABLE IF NOT EXISTS circle_sessions (
  id bigserial PRIMARY KEY,
  study_circle_id uuid NOT NULL REFERENCES study_circles(id) ON DELETE CASCADE,
  session_date date NOT NULL,
  start_time time,
  end_time time,
  teacher_id uuid REFERENCES profiles(id), -- snapshot (in case teacher changes later)
  notes text,
  created_at timestamptz DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_session_per_circle_day
  ON circle_sessions(study_circle_id, session_date);
  

CREATE TABLE IF NOT EXISTS attendance (
  id bigserial PRIMARY KEY,
  circle_session_id bigint NOT NULL REFERENCES circle_sessions(id) ON DELETE CASCADE,
  student_id uuid NOT NULL REFERENCES students(id) ON DELETE CASCADE,
  status text NOT NULL CHECK (status IN ('present','absent','late','excused')),
  late_minutes int DEFAULT 0 CHECK (late_minutes >= 0),
  note text,
  recorded_by uuid REFERENCES profiles(id),
  recorded_at timestamptz NOT NULL DEFAULT now(),
  UNIQUE(circle_session_id, student_id)
);

-- جدول أولياء الأمور (guardians) مع أعمدة إضافية
CREATE TABLE guardians (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  full_name text NOT NULL,
  phone_number text NOT NULL UNIQUE,
  email text UNIQUE,
  address text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  deleted_at timestamp
);

create policy "Allow read for all" on guardians
  for select
  using (true);
  
-- جدول الطلاب (students) مع أعمدة إضافية
create table students (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  guardian_id uuid references guardians(id) on delete set null,
  study_circle_id uuid references study_circles(id) on delete set null, -- الحلقة الحالية
  full_name text not null,
  date_of_birth date,
  gender text check (gender in ('male', 'female')) default 'male',
  phone_number text unique,
  email text unique,
  enrollment_date date default current_date,
  grade_level text,
  memorized_parts text,
  notes text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  deleted_at timestamp
);

create policy "Allow read for all" on students
  for select
  using (true);
  
CREATE POLICY "Allow all inserts"
  ON students
  FOR INSERT
  WITH CHECK (true);  
  

-- سجل المعلمين السابقين للطالب
create table student_teacher_history (
  id bigserial primary key,
  student_id uuid references students(id) on delete cascade,
  teacher_id uuid references profiles(id) on delete set null,
  start_date date not null,
  end_date date
);

ALTER TABLE student_teacher_history
ADD COLUMN study_circle_id uuid REFERENCES study_circles(id) ON DELETE SET NULL;




-- إنشاء جدول سجلات الحفظ والمراجعة
CREATE TABLE IF NOT EXISTS memorization_records (
  id bigserial PRIMARY KEY,
  student_id uuid REFERENCES students(id) ON DELETE CASCADE,
  date date NOT NULL DEFAULT current_date,
  type text NOT NULL CHECK (type IN ('new','review','sabqi')),
  from_surah int NOT NULL CHECK (from_surah >= 1 AND from_surah <= 114),
  from_ayah int NOT NULL CHECK (from_ayah >= 1),
  to_surah int NOT NULL CHECK (to_surah >= 1 AND to_surah <= 114),
  to_ayah int NOT NULL CHECK (to_ayah >= 1),
  score numeric(5,2) CHECK (score >= 0 AND score <= 100), -- درجة التسميع
  tajweed_errors jsonb, -- {"lahn_jali":1,"lahn_khafi":2}
  notes text,
  recorded_by uuid REFERENCES profiles(id),
  created_at timestamptz DEFAULT now()
);

-- إضافة فهارس لتحسين الأداء
CREATE INDEX IF NOT EXISTS idx_memorization_records_student_id ON memorization_records(student_id);
CREATE INDEX IF NOT EXISTS idx_memorization_records_date ON memorization_records(date);
CREATE INDEX IF NOT EXISTS idx_memorization_records_type ON memorization_records(type);
CREATE INDEX IF NOT EXISTS idx_memorization_records_recorded_by ON memorization_records(recorded_by);

  
-- جدول اختبارات الطالب
CREATE TABLE IF NOT EXISTS assessments (
  id bigserial PRIMARY KEY,
  student_id uuid REFERENCES students(id) ON DELETE CASCADE,
  date date NOT NULL DEFAULT current_date,
  type text NOT NULL CHECK (type IN ('juz','half_quran','full_quran','periodic')), 
  -- تفاصيل الاختبار
  from_surah int,       -- من أي سورة
  from_ayah int,        -- من أي آية
  to_surah int,         -- إلى أي سورة
  to_ayah int,          -- إلى أي آية
  tajweed_score numeric(5,2),  -- درجة التجويد
  memorization_score numeric(5,2), -- درجة الحفظ
  recitation_score numeric(5,2),   -- درجة التلاوة
  total_score numeric(5,2),       -- المجموع الكلي
  notes text,                       -- ملاحظات عامة
  recorded_by uuid REFERENCES profiles(id),
  created_at timestamptz DEFAULT now(),
  description text                 -- ملاحظات وصفية
);

--**********************

-- جدول الإشعارات
CREATE TABLE notifications (
  id bigserial PRIMARY KEY,
  user_id uuid REFERENCES profiles(id),
  channel text CHECK (channel IN ('sms','whatsapp','email')),
  message text NOT NULL,
  sent_at timestamptz,
  status text CHECK (status IN ('queued','sent','failed')) DEFAULT 'queued'
);