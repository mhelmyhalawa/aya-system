import { useEffect, useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { FormDialog, FormRow } from "@/components/ui/form-dialog";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Calendar,
  UserCheck,
  Clock,
  Edit,
  Trash2,
  CalendarRange,
  AlarmClock,
  CalendarClock,
  BookOpen,
  Plus,
  FileText,
  Search,
  Check
} from "lucide-react";
import { getStudyCirclesByTeacherId, getAllStudyCircles } from "@/lib/study-circle-service";
import { getSessionsByCircleId, createSession, updateSession, deleteSession } from "@/lib/circle-session-service";
import { getteachers } from "@/lib/profile-service";
import { StudyCircle } from "@/types/study-circle";
import { CircleSession, formatTimeDisplay, formatDateDisplay, formatShortDate } from "@/types/circle-session";
import { Profile } from "@/types/profile";
import { DeleteConfirmationDialog } from "@/components/ui/delete-confirmation-dialog";
import { Badge } from "@/components/ui/badge";
import { GenericTable } from "@/components/ui/generic-table";

interface TeacherSessionsProps {
  onNavigate: (path: string) => void;
  currentUser: Profile | null;
}

export function TeacherSessions({ onNavigate, currentUser }: TeacherSessionsProps) {
  const { toast } = useToast();
  const [teacherCircles, setTeacherCircles] = useState<StudyCircle[]>([]);
  const [allCircles, setAllCircles] = useState<StudyCircle[]>([]);
  const [selectedCircle, setSelectedCircle] = useState<string>("");
  const [circleSessions, setCircleSessions] = useState<CircleSession[]>([]);
  const [teachers, setTeachers] = useState<Profile[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [sessionToDelete, setSessionToDelete] = useState<CircleSession | null>(null);
  const [formData, setFormData] = useState<{
    study_circle_id: string;
    session_date: string;
    start_time: string;
    end_time: string;
    notes: string;
    teacher_id: string; // معرف المعلم البديل
  }>({
    study_circle_id: "",
    session_date: new Date().toISOString().split('T')[0], // التاريخ الحالي بتنسيق YYYY-MM-DD
    start_time: "",
    end_time: "",
    notes: "",
    teacher_id: "",
  });

  // للتحقق ما إذا كان المستخدم مدير أو مشرف
  const isAdminOrSuperadmin = currentUser?.role === 'admin' || currentUser?.role === 'superadmin';

  // جلب حلقات المعلم عند تحميل الصفحة
  useEffect(() => {
    const loadData = async () => {
      if (!currentUser) {
        toast({
          title: "تنبيه",
          description: "يرجى تسجيل الدخول أولاً",
          variant: "destructive",
        });
        onNavigate('/login');
        return;
      }

      // عرض معلومات المستخدم للتشخيص
      console.log("TeacherSessions - Current User:", currentUser);
      console.log("TeacherSessions - User Role:", currentUser.role);
      console.log("TeacherSessions - isAdminOrSuperadmin:", isAdminOrSuperadmin);

      // التأكد من أن المستخدم لديه الصلاحيات المطلوبة
      if (currentUser.role !== 'admin' && currentUser.role !== 'superadmin' && currentUser.role !== 'teacher') {
        console.error("Invalid role for this page:", currentUser.role);
        toast({
          title: "تنبيه",
          description: `ليس لديك صلاحية للوصول إلى هذه الصفحة. الدور الحالي: ${currentUser.role}`,
          variant: "destructive",
        });
        setTimeout(() => onNavigate('/'), 2000);
        return;
      }

      setLoading(true);
      try {
        // جلب المعلمين المتاحين للاختيار كبديل (للمشرفين والمديرين فقط)
        if (isAdminOrSuperadmin) {
          const teachersList = await getteachers();
          setTeachers(teachersList);

          // جلب جميع الحلقات للمشرفين والمديرين
          const circles = await getAllStudyCircles();
          setAllCircles(circles);

          // اختيار أول حلقة افتراضياً إذا وجدت
          if (circles.length > 0) {
            setSelectedCircle(circles[0].id);
          }
        } else if (currentUser.role === 'teacher') {
          // جلب حلقات المعلم فقط
          console.log("Fetching circles for teacher:", currentUser.id);
          const circles = await getStudyCirclesByTeacherId(currentUser.id);
          setTeacherCircles(circles);

          // اختيار أول حلقة افتراضياً إذا وجدت
          if (circles.length > 0) {
            setSelectedCircle(circles[0].id);
          }
        } else {
          console.error("Invalid role for this page:", currentUser.role);
          toast({
            title: "تنبيه",
            description: `ليس لديك صلاحية للوصول إلى هذه الصفحة. الدور الحالي: ${currentUser.role}`,
            variant: "destructive",
          });
          setTimeout(() => onNavigate('/'), 2000);
        }
      } catch (error) {
        console.error("خطأ في جلب البيانات:", error);
        toast({
          title: "خطأ",
          description: "حدث خطأ أثناء جلب البيانات",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [currentUser, onNavigate, toast, isAdminOrSuperadmin]);

  // جلب جلسات الحلقة المختارة
  useEffect(() => {
    const loadCircleSessions = async () => {
      if (!selectedCircle) return;

      setLoading(true);
      try {
        const sessions = await getSessionsByCircleId(selectedCircle);
        
        // فلترة الجلسات لعرض الجلسات المستقبلية فقط من تاريخ اليوم
        const today = new Date();
        today.setHours(0, 0, 0, 0); // تعيين الوقت إلى بداية اليوم
        
        const futureSessions = sessions.filter(session => {
          const sessionDate = new Date(session.session_date);
          sessionDate.setHours(0, 0, 0, 0); // تعيين الوقت إلى بداية اليوم للمقارنة بشكل صحيح
          return sessionDate >= today; // تضمين الجلسات من اليوم فصاعداً
        });
        
        setCircleSessions(futureSessions);
      } catch (error) {
        console.error("خطأ في جلب جلسات الحلقة:", error);
        toast({
          title: "خطأ",
          description: "حدث خطأ أثناء جلب بيانات الجلسات",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };

    loadCircleSessions();
  }, [selectedCircle, toast]);

  // تصفية الحلقات بناءً على مصطلح البحث
  const filteredCircles = () => {
    const circles = isAdminOrSuperadmin ? allCircles : teacherCircles;
    if (!searchTerm.trim()) return circles;

    return circles.filter(circle =>
      circle.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (circle.teacher?.full_name && circle.teacher.full_name.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  };

  // تغيير الحلقة المختارة
  const handleCircleChange = (circleId: string) => {
    setSelectedCircle(circleId);
  };

  // إعداد النموذج لإضافة جلسة جديدة
  const handleAddSession = () => {
    setFormData({
      study_circle_id: selectedCircle,
      session_date: new Date().toISOString().split('T')[0],
      start_time: "",
      end_time: "",
      notes: "",
      teacher_id: currentUser?.id || "",
    });
    setIsEditMode(false);
    setIsDialogOpen(true);
  };

  // إعداد النموذج لتعديل جلسة موجودة
  const handleEditSession = (session: CircleSession) => {
    setFormData({
      study_circle_id: session.study_circle_id,
      session_date: session.session_date,
      start_time: session.start_time || "",
      end_time: session.end_time || "",
      notes: session.notes || "",
      teacher_id: session.teacher_id || currentUser?.id || "",
    });
    setIsEditMode(true);
    setIsDialogOpen(true);
  };

  // تغيير قيم النموذج
  const handleFormChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // حفظ الجلسة (إضافة أو تعديل)
  const handleSaveSession = async () => {
    // التحقق من البيانات المطلوبة
    if (!formData.study_circle_id || !formData.session_date) {
      toast({
        title: "خطأ",
        description: "يجب تحديد الحلقة وتاريخ الجلسة",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      let result;

      if (isEditMode) {
        // تحديث جلسة موجودة
        result = await updateSession({
          study_circle_id: formData.study_circle_id,
          session_date: formData.session_date,
          start_time: formData.start_time || undefined,
          end_time: formData.end_time || undefined,
          notes: formData.notes || undefined,
          teacher_id: formData.teacher_id || undefined,
        });
      } else {
        // إنشاء جلسة جديدة
        result = await createSession({
          study_circle_id: formData.study_circle_id,
          session_date: formData.session_date,
          start_time: formData.start_time || undefined,
          end_time: formData.end_time || undefined,
          notes: formData.notes || undefined,
          teacher_id: formData.teacher_id || currentUser?.id,
        });
      }

      if (result.success) {
        toast({
          title: "تم بنجاح",
          description: isEditMode ? "تم تحديث الجلسة بنجاح" : "تم إضافة الجلسة بنجاح",
        });
        setIsDialogOpen(false);

        // إعادة تحميل الجلسات
        const sessions = await getSessionsByCircleId(selectedCircle);
        setCircleSessions(sessions);
      } else {
        toast({
          title: "خطأ",
          description: result.error || "حدث خطأ أثناء حفظ الجلسة",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("خطأ في حفظ الجلسة:", error);
      toast({
        title: "خطأ",
        description: "حدث خطأ غير متوقع أثناء حفظ الجلسة",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // حذف جلسة - الخطوة الأولى: فتح مربع حوار التأكيد
  const handleDeleteSession = (session: CircleSession) => {
    setSessionToDelete(session);
    setIsDeleteDialogOpen(true);
  };

  // حذف جلسة - الخطوة الثانية: تنفيذ الحذف بعد التأكيد
  const confirmDeleteSession = async () => {
    if (!sessionToDelete) return;

    setLoading(true);
    try {
      const result = await deleteSession(sessionToDelete.study_circle_id, sessionToDelete.session_date);

      if (result.success) {
        toast({
          title: "تم بنجاح",
          description: "تم حذف الجلسة بنجاح",
        });

        // إعادة تحميل الجلسات
        const sessions = await getSessionsByCircleId(selectedCircle);
        setCircleSessions(sessions);
      } else {
        toast({
          title: "خطأ",
          description: result.error || "حدث خطأ أثناء حذف الجلسة",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("خطأ في حذف الجلسة:", error);
      toast({
        title: "خطأ",
        description: "حدث خطأ غير متوقع أثناء حذف الجلسة",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
      setIsDeleteDialogOpen(false);
      setSessionToDelete(null);
    }
  };

  // العثور على اسم الحلقة من معرفها
  const getCircleName = (circleId: string): string => {
    const circlesList = isAdminOrSuperadmin ? allCircles : teacherCircles;
    const circle = circlesList.find((c) => c.id === circleId);
    return circle ? circle.name : "حلقة غير معروفة";
  };

  // العثور على معلم الحلقة
  const getCircleTeacher = (circleId: string): string => {
    const circlesList = isAdminOrSuperadmin ? allCircles : teacherCircles;
    const circle = circlesList.find((c) => c.id === circleId);
    return " " + circle?.teacher?.full_name || "لا يوجد معلم محدد";
  };

  // العثور على اسم المعلم من معرفه
  const getTeacherName = (teacherId?: string): string => {
    if (!teacherId) return "";
    const teacher = teachers.find((t) => t.id === teacherId);
    return teacher ? teacher.full_name : "";
  };

  return (
    <div className="w-full mx-auto py-3 sm:py-6 px-0 sm:px-4" dir="rtl">
      <Card className="border border-green-300 shadow-lg sm:shadow-xl rounded-none md:rounded-2xl overflow-hidden">
        {/* الهيدر */}
        <CardHeader className="pb-2 sm:pb-4 bg-gradient-to-r from-green-800 via-green-700 to-green-600 border-b-2 border-green-300/70 rounded-none md:rounded-t-2xl shadow-lg px-2 sm:px-4 sticky top-0 z-30">
          <div className="flex justify-between items-center gap-2 sm:gap-3 w-full">
            {/* العنوان والوصف */}
            <div className="flex flex-col">
              <CardTitle className="text-base sm:text-xl md:text-2xl font-extrabold text-white flex items-center gap-1 sm:gap-2 drop-shadow-md">
                <Calendar className="h-4 w-4 sm:h-6 sm:w-6 text-yellow-300 animate-pulse" />
                <span className="line-clamp-1">تسجيل الجلسات المستقبلية</span>
              </CardTitle>
              <CardDescription className="text-[11px] sm:text-sm md:text-sm text-green-100 mt-0.5 font-medium drop-shadow">
                نظام إدارة جلسات الحلقات القرآنية المستقبلية من تاريخ اليوم
              </CardDescription>
            </div>

            {/* زر إضافة جلسة جديدة */}
            {selectedCircle && (
              <Button
                onClick={handleAddSession}
                size="sm"
                className="flex items-center gap-1 rounded-lg sm:rounded-2xl bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-md sm:shadow-lg hover:scale-105 transition-all duration-300 px-2 sm:px-4 py-1.5 sm:py-2 text-[11px] sm:text-sm md:text-base border border-green-200"
              >
                <Plus className="h-3.5 w-3.5 sm:h-5 sm:w-5" />
                <span className="sr-only sm:not-sr-only sm:inline">تسجيل جلسة جديدة</span>
              </Button>
            )}
          </div>
        </CardHeader>
        <CardContent className="space-y-3 sm:space-y-6 px-2 sm:px-4 pt-3 pb-4">
          <div className="grid md:grid-cols-3 gap-2 sm:gap-6">
            {/* قائمة الجوال */}
            <div className="md:hidden">
              <div className="bg-white/70 backdrop-blur border border-green-200 rounded-lg shadow-sm overflow-hidden mb-3">
                {/* الهيدر */}
                <div className="sticky top-0 z-10 flex items-center justify-between gap-2 px-2 py-2 bg-gradient-to-r from-green-600 via-green-500 to-green-600">
                  <div className="flex items-center gap-1">
                    <BookOpen className="h-3.5 w-3.5 text-white" />
                    <h2 className="text-[12px] font-semibold text-white">قائمة الحلقات</h2>
                  </div>
                </div>

                {/* البحث */}
                <div className="px-2 pt-2">
                  <div className="relative">
                    <Search className="absolute right-2 top-2 h-3.5 w-3.5 text-green-400" />
                    <Input
                      placeholder="بحث..."
                      className="pr-7 h-8 text-[11px] rounded-lg border-green-300 focus:ring-green-300"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                </div>

                {/* العناصر */}
                <div className="px-2 pt-2 pb-1 overflow-y-auto max-h-44 scrollbar-thin scrollbar-thumb-green-400 scrollbar-track-transparent">
                  {loading ? (
                    <div className="w-full py-6 text-center flex flex-col items-center">
                      <div className="animate-spin h-5 w-5 border-2 border-green-500 border-t-transparent rounded-full mb-2"></div>
                      <span className="text-green-700 text-[12px] font-medium">جاري التحميل...</span>
                    </div>
                  ) : filteredCircles().length === 0 ? (
                    <div className="w-full py-6 text-center text-green-600 text-[12px]">لا توجد نتائج</div>
                  ) : (
                    <div className="flex flex-col gap-1">
                      {filteredCircles().map(circle => {
                        const active = selectedCircle === circle.id;
                        return (
                          <button
                            key={circle.id}
                            onClick={() => handleCircleChange(circle.id)}
                            className={`group flex items-center justify-between w-full px-2 py-1.5 rounded-md border text-[11px] transition-all duration-200
                          ${active
                                ? 'bg-gradient-to-r from-green-600 to-green-700 border-green-300 text-white shadow-md'
                                : 'bg-white border-green-200 text-green-700 hover:bg-green-50 hover:border-green-400 hover:shadow-sm'}
                        `}
                          >
                            <span className="font-medium truncate">{circle.name}</span>
                            <div className="flex items-center gap-1.5">
                              {circle.teacher && (
                                <span className={`text-[10px] ${active ? 'text-green-100' : 'text-green-500'}`}>
                                  {circle.teacher.full_name.split(" ")[0]}
                                </span>
                              )}
                              {active && (
                                <span className="inline-flex items-center bg-white/30 text-[9px] px-1 py-0.5 rounded-full font-medium">
                                  ✓
                                </span>
                              )}
                            </div>
                          </button>
                        );
                      })}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* جانب الحلقات - ثلث الصفحة (ديسكتوب) */}
            <div className="md:col-span-1 hidden md:block">
              <div className="bg-green-50 border border-green-300 rounded-2xl shadow-lg overflow-hidden">
                <div className="bg-gradient-to-r from-green-600 via-green-500 to-green-700 p-3">
                  <h2 className="text-lg font-semibold text-white mb-0 flex items-center gap-2">
                    <BookOpen className="h-5 w-5" />
                    قائمة الحلقات
                  </h2>
                </div>

                <div className="p-3 space-y-3">
                  {/* مربع البحث */}
                  <div className="relative">
                    <Search className="absolute right-3 top-2.5 h-4 w-4 text-green-500" />
                    <Input
                      placeholder="ابحث عن حلقة أو معلم..."
                      className="pr-9 rounded-xl border-green-300 focus:ring-green-400"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>

                  {/* قائمة الحلقات */}
                  <div className="border border-green-300 rounded-xl overflow-hidden bg-white shadow-inner">
                    <div className="max-h-[calc(100vh-25rem)] overflow-y-auto scrollbar-thin scrollbar-thumb-green-400 scrollbar-track-transparent">
                      {loading ? (
                        <div className="flex flex-col items-center justify-center p-8 text-center">
                          <div className="animate-spin h-8 w-8 border-3 border-green-500 border-t-transparent rounded-full mb-2"></div>
                          <span className="text-green-700 font-medium">جاري التحميل...</span>
                        </div>
                      ) : filteredCircles().length === 0 ? (
                        <div className="p-8 text-center text-green-600">لا توجد حلقات</div>
                      ) : (
                        <div className="divide-y divide-green-200">
                          {filteredCircles().map(circle => {
                            const active = selectedCircle === circle.id;
                            return (
                              <button
                                key={circle.id}
                                onClick={() => handleCircleChange(circle.id)}
                                className={`w-full flex items-center justify-between gap-2 p-3 transition-all duration-200 text-right
                                ${active
                                    ? 'bg-gradient-to-r from-green-600 to-green-700 text-white shadow-md'
                                    : 'bg-white hover:bg-green-50 text-green-800 hover:shadow-sm'}
                              `}
                              >
                                <div className="flex flex-col items-start">
                                  <span className={`font-semibold truncate ${active ? 'text-white' : 'text-green-800'}`}>
                                    {circle.name}
                                  </span>
                                  {circle.teacher && (
                                    <span className={`text-xs ${active ? 'text-green-100' : 'text-green-600'}`}>
                                      المعلم: {circle.teacher.full_name}
                                    </span>
                                  )}
                                </div>
                                {active && (
                                  <div className="bg-white/20 p-1 rounded-full">
                                    <Check className="h-4 w-4" />
                                  </div>
                                )}
                              </button>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>


            {/* عرض الجلسات - ثلثي الصفحة */}
            <div className="md:col-span-2">
              <div className="bg-white border border-green-200 rounded-xl shadow-md overflow-hidden">
                {/* هيدر الجلسات */}
                <div className="bg-gradient-to-r from-green-100 via-green-200 to-green-300 px-3 py-2 sm:px-4 sm:py-3 border-b border-green-300">
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
                    <div className="flex items-center gap-1 sm:gap-2">
                      <Calendar className="h-4 w-4 sm:h-5 sm:w-5 text-green-700" />
                      <h3 className="text-sm sm:text-base md:text-lg font-bold text-green-800">
                        {selectedCircle ? (
                          <span>الجلسات المستقبلية لحلقة: {getCircleName(selectedCircle)}</span>
                        ) : (
                          <span>الجلسات المستقبلية للحلقة</span>
                        )}
                      </h3>
                    </div>
                    {selectedCircle && (
                      <Button
                        onClick={handleAddSession}
                        size="sm"
                        className="bg-green-600 hover:bg-green-700 text-white text-xs sm:text-sm rounded-lg shadow-sm flex items-center gap-1"
                      >
                        <Plus className="h-3.5 w-3.5" />
                        تسجيل جلسة جديدة
                      </Button>
                    )}
                  </div>
                </div>

                {/* عداد الجلسات والبيانات */}
                <div className="p-3 sm:p-4">
                  {/* عدد الجلسات */}
                  <div className="bg-green-50 rounded-lg border border-green-200 p-2 sm:p-3 mb-3 sm:mb-4">
                    <Badge variant="outline" className="text-green-800 border-green-400 text-xs sm:text-sm">
                      {circleSessions.length > 0
                        ? `عدد الجلسات المستقبلية: ${circleSessions.length}`
                        : "لا توجد جلسات مستقبلية"}
                    </Badge>
                  </div>

                  {/* جدول الجلسات */}
                  {loading ? (
                    <div className="text-center py-12 flex flex-col items-center justify-center">
                      <div className="animate-spin h-8 w-8 border-3 border-green-500 border-t-transparent rounded-full mb-2"></div>
                      <span className="text-green-700 font-medium">جاري التحميل...</span>
                    </div>
                  ) : selectedCircle ? (
                    circleSessions.length > 0 ? (
                      <div className="overflow-hidden">
                        <GenericTable
                          data={circleSessions.map((session, index) => ({
                            ...session,
                            id: `${session.study_circle_id}-${session.session_date}-${index}`
                          }))}
                          columns={[
                            {
                              key: 'session_date',
                              header: '📅 التاريخ',
                              align: 'right',
                              render: (session) => (
                                <div className="flex flex-col text-right">
                                  <span className="text-green-800 font-medium">{formatShortDate(session.session_date)}</span>
                                  <span className="text-xs text-green-600">{formatDateDisplay(session.session_date)}</span>
                                </div>
                              ),
                            },
                            {
                              key: 'time',
                              header: '⏰ الوقت',
                              align: 'right',
                              render: (session) => (
                                <div className="flex items-center gap-2">
                                  <div className="flex items-center gap-1 bg-blue-100 text-blue-800 px-3 py-1 rounded-lg">
                                    <Clock className="h-4 w-4" />
                                    <span className="font-medium">{formatTimeDisplay(session.start_time)}</span>
                                  </div>
                                  <span className="text-gray-400 font-bold mx-1">—</span>
                                  <div className="flex items-center gap-1 bg-purple-100 text-purple-800 px-3 py-1 rounded-lg">
                                    <Clock className="h-4 w-4" />
                                    <span className="font-medium">{formatTimeDisplay(session.end_time)}</span>
                                  </div>
                                </div>
                              ),
                            },
                            {
                              key: 'notes',
                              header: '📝 ملاحظات',
                              align: 'right',
                              render: (session) => (
                                <span className="text-green-800 max-w-[200px] block">{session.notes || '—'}</span>
                              ),
                            },
                            {
                              key: 'actions',
                              header: '⚙️ إجراءات',
                              align: 'center',
                              render: (session) => (
                                <div className="flex justify-center gap-2">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleEditSession({ 
                                      study_circle_id: session.study_circle_id,
                                      session_date: session.session_date,
                                      start_time: session.start_time,
                                      end_time: session.end_time,
                                      notes: session.notes,
                                      teacher_id: session.teacher_id
                                    })}
                                    className="bg-green-200 hover:bg-green-300 text-green-900 rounded-md p-2 transition-colors"
                                    title="تعديل الجلسة"
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleDeleteSession({
                                      study_circle_id: session.study_circle_id,
                                      session_date: session.session_date,
                                      start_time: session.start_time,
                                      end_time: session.end_time,
                                      notes: session.notes,
                                      teacher_id: session.teacher_id
                                    })}
                                    className="bg-red-100 hover:bg-red-200 text-red-700 rounded-md p-2 transition-colors"
                                    title="حذف الجلسة"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              ),
                            },
                          ]}
                          emptyMessage="لا توجد جلسات مستقبلية"
                          className="overflow-hidden rounded-xl border border-green-300 shadow-md"
                          getRowClassName={(_, index) =>
                            `${index % 2 === 0 ? 'bg-green-50 hover:bg-green-100' : 'bg-white hover:bg-green-50'} cursor-pointer transition-colors`
                          }
                        />
                      </div>
                    ) : (
                      <div className="py-16 text-center">
                        <div className="bg-green-50 rounded-2xl p-6 max-w-md mx-auto border border-green-200 shadow-inner">
                          <Calendar className="w-12 h-12 text-green-300 mx-auto mb-3" />
                          <h3 className="text-lg font-bold text-green-800 mb-2">لا توجد جلسات مستقبلية</h3>
                          <p className="text-green-600 text-sm mb-4">
                            لا توجد جلسات مستقبلية مسجلة لهذه الحلقة
                          </p>
                          <Button
                            onClick={handleAddSession}
                            className="bg-green-600 hover:bg-green-700 text-white rounded-xl"
                          >
                            <Plus className="h-4 w-4 mr-1" />
                            تسجيل جلسة جديدة
                          </Button>
                        </div>
                      </div>
                    )
                  ) : (
                    <div className="py-16 text-center">
                      <div className="bg-green-50 rounded-2xl p-6 max-w-md mx-auto border border-green-200 shadow-inner">
                        <BookOpen className="w-12 h-12 text-green-300 mx-auto mb-3" />
                        <h3 className="text-lg font-bold text-green-800 mb-2">اختر حلقة لعرض الجلسات</h3>
                        <p className="text-green-600 text-sm">
                          يرجى اختيار حلقة من القائمة على اليمين لعرض الجلسات المستقبلية الخاصة بها
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>


      <FormDialog
        title={isEditMode ? "تعديل جلسة" : "تسجيل جلسة جديدة"}
        description={isEditMode ? "قم بتعديل بيانات الجلسة أدناه" : "قم بإدخال بيانات الجلسة الجديدة"}
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        onSave={handleSaveSession}
        saveButtonText="حفظ"
        cancelButtonText="إلغاء"
        mode={isEditMode ? "edit" : "add"}
        isLoading={loading}
        maxWidth="550px"
      >
        {/* التاريخ */}
        <FormRow label="تاريخ الجلسة *">
          <Input
            id="session_date"
            name="session_date"
            type="date"
            value={formData.session_date}
            onChange={handleFormChange}
            className="text-right bg-green-50 border-green-300 text-green-900 rounded-md py-2 px-3 shadow-inner focus:ring-2 focus:ring-green-400"
            required
          />
        </FormRow>

        {/* وقت البدء والانتهاء */}
        <div className="grid grid-cols-2 gap-4">
          <FormRow label="وقت البدء *">
            <Input
              id="start_time"
              name="start_time"
              type="time"
              value={formData.start_time}
              onChange={handleFormChange}
              className="text-right bg-green-50 border-green-300 text-green-900 rounded-md py-2 px-3 shadow-inner focus:ring-2 focus:ring-green-400"
            />
          </FormRow>
          <FormRow label="وقت الانتهاء *">
            <Input
              id="end_time"
              name="end_time"
              type="time"
              value={formData.end_time}
              onChange={handleFormChange}
              className="text-right bg-green-50 border-green-300 text-green-900 rounded-md py-2 px-3 shadow-inner focus:ring-2 focus:ring-green-400"
            />
          </FormRow>
        </div>

        {/* اختيار المعلم */}
        {isAdminOrSuperadmin && (
          <FormRow label="المعلم">
            <Select
              value={formData.teacher_id}
              onValueChange={(value) =>
                setFormData({ ...formData, teacher_id: value })
              }
            >
              <SelectTrigger className="w-full bg-green-50 border-green-300 text-green-900 rounded-md shadow-inner">
                <SelectValue placeholder="اختر المعلم" />
              </SelectTrigger>
              <SelectContent>
                {teachers.map((teacher) => (
                  <SelectItem key={teacher.id} value={teacher.id}>
                    {teacher.full_name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </FormRow>
        )}

        {/* الملاحظات */}
        <FormRow label="ملاحظات">
          <Textarea
            id="notes"
            name="notes"
            value={formData.notes}
            onChange={handleFormChange}
            className="text-right bg-green-50 border-green-300 text-green-900 rounded-md py-2 px-3 shadow-inner focus:ring-2 focus:ring-green-400"
            rows={3}
          />
        </FormRow>
      </FormDialog>

      {/* مربع حوار تأكيد الحذف */}
      <DeleteConfirmationDialog
        isOpen={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        onConfirm={confirmDeleteSession}
        isLoading={loading}
        title="تأكيد حذف الجلسة"
        description="هل أنت متأكد من رغبتك في حذف هذه الجلسة؟"
        itemDetails={sessionToDelete ? {
          "التاريخ": formatDateDisplay(sessionToDelete.session_date),
          "الوقت": sessionToDelete.start_time ?
            `${formatTimeDisplay(sessionToDelete.start_time)} - ${formatTimeDisplay(sessionToDelete.end_time || "")}` :
            "-",
          "الملاحظات": sessionToDelete.notes || "-"
        } : null}
        deleteButtonText="نعم، قم بالحذف"
        cancelButtonText="إلغاء"
      />
  );
}